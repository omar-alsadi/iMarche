{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, createUserProfileDocument, googleProvider, getCurrentUser } from '../../firebase/firebase-utils';\nimport { signInSuccess, signInFailure, signUpSuccess, signUpFailure, signOutSuccess, signOutFailure } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const snapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: snapShot.id,\n      ...snapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // to check if user exist or not\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield call(createUserProfileDocument(user, {\n      displayName\n    }));\n    yield put(signInWithEmail(user));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_START, signInWithEmail);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","createUserProfileDocument","googleProvider","getCurrentUser","signInSuccess","signInFailure","signUpSuccess","signUpFailure","signOutSuccess","signOutFailure","getSnapshotFromUserAuth","userAuth","userRef","snapShot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","createUserWithEmailAndPassword","displayName","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_START","onEmailSignInStart","EMAIL_SIGN_START","onSignUpStart","SIGN_UP_START","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types'\n\nimport { auth, createUserProfileDocument, googleProvider, getCurrentUser } from '../../firebase/firebase-utils'\n\nimport {\n    signInSuccess,\n    signInFailure,\n    signUpSuccess,\n    signUpFailure,\n    signOutSuccess,\n    signOutFailure\n} from './user.action'\n\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const snapShot = yield userRef.get();\n        yield put(signInSuccess({ id: snapShot.id, ...snapShot.data() }))\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user)\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\n\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user)\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\n// to check if user exist or not\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth)\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signOut() {\n    try {\n        yield auth.signOut()\n        yield put(signOutSuccess())\n    } catch (error) {\n        yield put(signOutFailure(error))\n    }\n}\n\nexport function* signUp({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield call(createUserProfileDocument(user, { displayName }));\n        yield put(signInWithEmail(user))\n    } catch (error) {\n        yield put(signUpFailure(error))\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,\n        isUserAuthenticated\n    )\n}\n\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_START,\n        signInWithGoogle\n    )\n}\n\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_START,\n        signInWithEmail\n    )\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_START,\n        signUp\n    )\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_OUT_START,\n        signOut\n    )\n}\n\nexport function* userSagas() {\n    yield all(\n        [call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart)])\n}"]},"metadata":{},"sourceType":"module"}