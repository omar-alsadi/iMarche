{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyBJTX7Ca8i_gtEzeXX6rgaQoOfQG2tSVMY\",\n  authDomain: \"clothy-store.firebaseapp.com\",\n  databaseURL: \"https://clothy-store.firebaseio.com\",\n  projectId: \"clothy-store\",\n  storageBucket: \"clothy-store.appspot.com\",\n  messagingSenderId: \"697380228396\",\n  appId: \"1:697380228396:web:60dca0ec64c1be5503b089\",\n  measurementId: \"G-12R4W3EJ8K\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date(); // create a new user from user auth to our database\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return userRef;\n}; // to add our shop data items to firebase database only\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // console.log(newDocRef);\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      // to make routeName to be the same title that means if title is 'jackets' the routeName will be 'jackets'\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // console.log(collections);\n  // console.log(transformedCollection);\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); // we can use authentication on facebook , twitter or other ... twitterAuthProvider()\n\ngoogleProvider.setCustomParameters({\n  prompts: 'select_account'\n}); // to trigger the Google pop up when ever we use Google auth provider \n// for authintication or sign in with google\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/firebase/firebase-utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","err","console","log","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompts","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,8BAFD;AAGXC,EAAAA,WAAW,EAAE,qCAHF;AAIXC,EAAAA,SAAS,EAAE,cAJA;AAKXC,EAAAA,aAAa,EAAE,0BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAEzE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAElB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AAEA,UAAMW,QAAQ,GAAG,IAAIC,IAAJ,EAAjB,CAJkB,CAMlB;;AACA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,QAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAOH,KARD,CAQE,OAAOa,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AAEJ;;AAED,SAAOZ,OAAP;AAEH,CA/BM,C,CAiCP;;AACA,OAAO,MAAMe,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAC5E,QAAMC,aAAa,GAAGjB,SAAS,CAACkB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGnB,SAAS,CAACmB,KAAV,EAAd;AAEAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAAChB,GAAd,EAAlB,CADwB,CAExB;;AACAkB,IAAAA,KAAK,CAACT,GAAN,CAAUY,SAAV,EAAqBD,GAArB;AACH,GAJD;AAMA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACH,CAZM;AAcP,OAAO,MAAMC,+BAA+B,GAAIC,WAAD,IAAiB;AAE5D,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqB3B,GAAG,IAAI;AACtD,UAAM;AAAE4B,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmB7B,GAAG,CAAC8B,IAAJ,EAAzB;AACA,WAAO;AACH;AACAC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CAFjB;AAGHC,MAAAA,EAAE,EAAElC,GAAG,CAACkC,EAHL;AAIHN,MAAAA,KAJG;AAKHC,MAAAA;AALG,KAAP;AAOH,GAT6B,CAA9B,CAF4D,CAY5D;AACA;;AACA,SAAOJ,qBAAqB,CAACU,MAAtB,CAA6B,CAACC,WAAD,EAAcnB,UAAd,KAA6B;AAC7DmB,IAAAA,WAAW,CAACnB,UAAU,CAACW,KAAX,CAAiBK,WAAjB,EAAD,CAAX,GAA8ChB,UAA9C;AACA,WAAOmB,WAAP;AACH,GAHM,EAGJ,EAHI,CAAP;AAIH,CAlBM;AAqBP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,WAAW,GAAGC,IAAI,CAACC,kBAAL,CAAwB/C,QAAQ,IAAI;AACpD6C,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAAC3C,QAAD,CAAP;AACH,KAHmB,EAGjB4C,MAHiB,CAApB;AAIH,GALM,CAAP;AAMH,CAPM;AASP,OAAO,MAAME,IAAI,GAAG1D,QAAQ,CAAC0D,IAAT,EAAb;AACP,OAAO,MAAM3C,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,OAAO,MAAM6C,cAAc,GAAG,IAAI5D,QAAQ,CAAC0D,IAAT,CAAcG,kBAAlB,EAAvB,C,CACP;;AAEAD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAnC,E,CACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAMN,IAAI,CAACO,eAAL,CAAqBL,cAArB,CAA/B;AAGP,eAAe5D,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nconst config = {\n    apiKey: \"AIzaSyBJTX7Ca8i_gtEzeXX6rgaQoOfQG2tSVMY\",\n    authDomain: \"clothy-store.firebaseapp.com\",\n    databaseURL: \"https://clothy-store.firebaseio.com\",\n    projectId: \"clothy-store\",\n    storageBucket: \"clothy-store.appspot.com\",\n    messagingSenderId: \"697380228396\",\n    appId: \"1:697380228396:web:60dca0ec64c1be5503b089\",\n    measurementId: \"G-12R4W3EJ8K\"\n}\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n    const snapShot = await userRef.get()\n\n    if (!snapShot.exists) {\n\n        const { displayName, email } = userAuth;\n\n        const createAt = new Date();\n\n        // create a new user from user auth to our database\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createAt,\n                ...additionalData\n            })\n\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n\n    return userRef;\n\n}\n\n// to add our shop data items to firebase database only\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        // console.log(newDocRef);\n        batch.set(newDocRef, obj)\n    });\n\n    return await batch.commit()\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n\n    const transformedCollection = collections.docs.map(doc => {\n        const { title, items } = doc.data()\n        return {\n            // to make routeName to be the same title that means if title is 'jackets' the routeName will be 'jackets'\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        }\n    });\n    // console.log(collections);\n    // console.log(transformedCollection);\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator\n    }, {});\n}\n\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth)\n        }, reject)\n    })\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n// we can use authentication on facebook , twitter or other ... twitterAuthProvider()\n\ngoogleProvider.setCustomParameters({ prompts: 'select_account' })\n// to trigger the Google pop up when ever we use Google auth provider \n// for authintication or sign in with google\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}