{"ast":null,"code":"import ShopActionType from './shop.type';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils';\nexport const fetchingCollectionStart = () => ({\n  type: ShopActionType.FETCH_COLLECTIONS_START\n});\nexport const fetchingCollectionSuccess = collectionsMap => ({\n  type: ShopActionType.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchingCollectionFailure = errorMessage => ({\n  type: ShopActionType.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // Thunk\n// export const fetchingCollectionSuccessAsync = () => {\n//     return dispatch => {\n//         const collectionRef = firestore.collection('collections');\n//         // to change isFetching to true\n//         dispatch(fetchingCollectionStart())\n//         collectionRef.get().then(snapShot => {\n//             const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n//             dispatch(fetchingCollectionSuccess(collectionsMap));\n//         }).catch(error => dispatch(fetchingCollectionFailure(error.message)))\n//     }\n// }\n\n/* Add to know ! */\n// If redux-thunk middleware is enabled ,\n// any time we attempt to dispatch a function instead of an object ,\n// the middleware will call that function with dispatch method itself\n// as the first argument .\n// we used it before fetching and before using thunk\n// export const updateCollections = (collectionsMap) => ({\n//     type: ShopActionType.UPDATE_COLLECTION,\n//     payload: collectionsMap\n// })","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/redux/shop/shop.action.js"],"names":["ShopActionType","firestore","convertCollectionsSnapshotToMap","fetchingCollectionStart","type","FETCH_COLLECTIONS_START","fetchingCollectionSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchingCollectionFailure","errorMessage","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,aAA3B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,uBAAuB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,cAAc,CAACK;AADqB,CAAP,CAAhC;AAIP,OAAO,MAAMC,yBAAyB,GAAIC,cAAD,KAAqB;AAC1DH,EAAAA,IAAI,EAAEJ,cAAc,CAACQ,yBADqC;AAE1DC,EAAAA,OAAO,EAAEF;AAFiD,CAArB,CAAlC;AAKP,OAAO,MAAMG,yBAAyB,GAAGC,YAAY,KAAK;AACtDP,EAAAA,IAAI,EAAEJ,cAAc,CAACY,yBADiC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA9C,C,CAOP;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AAGI;AACJ;AACA;AACA;AACA","sourcesContent":["import ShopActionType from './shop.type'\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n\nexport const fetchingCollectionStart = () => ({\n    type: ShopActionType.FETCH_COLLECTIONS_START,\n})\n\nexport const fetchingCollectionSuccess = (collectionsMap) => ({\n    type: ShopActionType.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchingCollectionFailure = errorMessage => ({\n    type: ShopActionType.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\n\n\n// Thunk\n\n// export const fetchingCollectionSuccessAsync = () => {\n//     return dispatch => {\n//         const collectionRef = firestore.collection('collections');\n\n//         // to change isFetching to true\n//         dispatch(fetchingCollectionStart())\n\n//         collectionRef.get().then(snapShot => {\n//             const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n//             dispatch(fetchingCollectionSuccess(collectionsMap));\n//         }).catch(error => dispatch(fetchingCollectionFailure(error.message)))\n//     }\n// }\n\n\n/* Add to know ! */\n\n// If redux-thunk middleware is enabled ,\n// any time we attempt to dispatch a function instead of an object ,\n// the middleware will call that function with dispatch method itself\n// as the first argument .\n\n\n    // we used it before fetching and before using thunk\n// export const updateCollections = (collectionsMap) => ({\n//     type: ShopActionType.UPDATE_COLLECTION,\n//     payload: collectionsMap\n// })\n\n\n\n"]},"metadata":{},"sourceType":"module"}