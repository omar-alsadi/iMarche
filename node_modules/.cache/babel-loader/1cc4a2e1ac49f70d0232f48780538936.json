{"ast":null,"code":"var _jsxFileName = \"/Users/Roxas/Documents/Websites/iMarche/src/component/pages/shop/shop-page.component.jsx\";\nimport React, { useEffect, lazy, Suspense } from 'react';\nimport './shop-page.style.scss';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { fetchingCollectionStart } from '../../redux/shop/shop.action';\nimport Spinner from '../../spinner/spinner.component';\nconst CollectionsOverviewContainer = lazy(() => import('../../collections-overview/collections-overview.container'));\nconst CollectionPageContainer = lazy(() => import('../collection/collection.container'));\n\nconst ShopPage = ({\n  fetchingCollectionStart,\n  match\n}) => {\n  useEffect(() => {\n    fetchingCollectionStart();\n  }, [fetchingCollectionStart]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 33\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  })));\n}; // const mapStateToProps = createStructuredSelector({\n//     isCollectionFetching: selectIsCollectionFetching,\n//     isCollectionLoaded: selectIsCollectionLoaded\n// })\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchingCollectionStart: () => dispatch(fetchingCollectionStart()) // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/iMarche/src/component/pages/shop/shop-page.component.jsx"],"names":["React","useEffect","lazy","Suspense","connect","Route","fetchingCollectionStart","Spinner","CollectionsOverviewContainer","CollectionPageContainer","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAO,wBAAP;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,SAASC,uBAAT,QAAwC,8BAAxC;AAEA,OAAOC,OAAP,MAAoB,iCAApB;AAEA,MAAMC,4BAA4B,GAAGN,IAAI,CAAC,MAAM,OAAO,2DAAP,CAAP,CAAzC;AACA,MAAMO,uBAAuB,GAAGP,IAAI,CAAC,MAAM,OAAO,oCAAP,CAAP,CAApC;;AAGA,MAAMQ,QAAQ,GAAG,CAAC;AAAEJ,EAAAA,uBAAF;AAA2BK,EAAAA;AAA3B,CAAD,KAAwC;AAErDV,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,uBAAuB;AAC1B,GAFQ,EAEN,CAACA,uBAAD,CAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,QAAD;AAAU,IAAA,QAAQ,eAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEK,KAAK,CAACC,IAAK,EAAjC;AAAoC,IAAA,SAAS,EAAEJ,4BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAOI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAEG,KAAK,CAACC,IAAK,gBAA3B;AAA4C,IAAA,SAAS,EAAEH,uBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAFJ,CADJ;AAkBH,CAxBD,C,CA0BA;AACA;AACA;AACA;;;AAEA,MAAMI,kBAAkB,GAAGC,QAAQ,KAAK;AACpCR,EAAAA,uBAAuB,EAAE,MAAMQ,QAAQ,CAACR,uBAAuB,EAAxB,CADH,CAEpC;;AAFoC,CAAL,CAAnC;;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAOS,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect, lazy, Suspense } from 'react';\nimport './shop-page.style.scss'\n\nimport { connect } from 'react-redux'\n\nimport { Route } from 'react-router-dom'\n\nimport { fetchingCollectionStart } from '../../redux/shop/shop.action'\n\nimport Spinner from '../../spinner/spinner.component'\n\nconst CollectionsOverviewContainer = lazy(() => import('../../collections-overview/collections-overview.container'));\nconst CollectionPageContainer = lazy(() => import('../collection/collection.container'))\n\n\nconst ShopPage = ({ fetchingCollectionStart, match }) => {\n\n    useEffect(() => {\n        fetchingCollectionStart()\n    }, [fetchingCollectionStart])\n\n    return (\n        <div className='shop-page'>\n\n            <Suspense fallback={<Spinner />}>\n                {/* match.path refers to the same page '/shop' because it the root page here */}\n\n                <Route exact path={`${match.path}`} component={CollectionsOverviewContainer} />\n\n                {/* :collectionId to make it reuseable if we have more catagories or product sections */}\n\n                <Route path={`${match.path}/:collectionId`} component={CollectionPageContainer} />\n                {/* isCollectionLoaded initiate state is false if the collections = null or not loaded */}\n                {/* that means the data will be load , so we have to switch 'isLoading' to true till data loaded */}\n                {/* bcuz the spinner only renders the spinner if isLoading is true which means that if there is no collection */}\n            </Suspense>\n        </div>\n    )\n\n}\n\n// const mapStateToProps = createStructuredSelector({\n//     isCollectionFetching: selectIsCollectionFetching,\n//     isCollectionLoaded: selectIsCollectionLoaded\n// })\n\nconst mapDispatchToProps = dispatch => ({\n    fetchingCollectionStart: () => dispatch(fetchingCollectionStart())\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage)"]},"metadata":{},"sourceType":"module"}