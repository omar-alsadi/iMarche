{"ast":null,"code":"var _jsxFileName = \"/Users/Roxas/Documents/Websites/clothy/src/component/pages/shop/shop-page.component.jsx\";\nimport React, { useEffect } from 'react';\nimport './shop-page.style.scss';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom'; // import { fetchingCollectionSuccessAsync } from '../../redux/shop/shop.action'\n\nimport { fetchingCollectionStart } from '../../redux/shop/shop.action';\nimport CollectionPageContainer from '../collection/collection.container';\nimport CollectionsOverviewContainer from '../../collections-overview/collections-overview.container'; // import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n// import { updateCollections } from '../../redux/shop/shop.action'\n// // add spinner when loading the items on the page\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({\n  fetchingCollectionStart,\n  match\n}) => {\n  // // we need isLoading true to render the spinner when items loading\n  // state = {\n  //     isLoading: true\n  // }\n  useEffect(() => {\n    fetchingCollectionStart();\n  }, []); // unsubscribeFromSnapshot = null;\n  // componentDidMount() {\n  //     const { fetchingCollectionStart } = this.props;\n  //     fetchingCollectionStart()\n  //     // we used it before thunk and async\n  //     // // to get collections items from firebase databse when page starts\n  //     // const collectionRef = firestore.collection('collections');\n  //     // const { updateCollections } = this.props;\n  //     // collectionRef.onSnapshot(async snapShot => {\n  //     //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n  //     //     updateCollections(collectionsMap);\n  //     //     this.setState({ isLoading: false })\n  //     //     // // if we like to use get and promises\n  //     //     // collectionRef.get().then(snapShot => {\n  //     //     //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n  //     //     //     updateCollections(collectionsMap);\n  //     //     //     this.setState({ isLoading: false }) );\n  //     // })\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n}; // const mapStateToProps = createStructuredSelector({\n//     isCollectionFetching: selectIsCollectionFetching,\n//     isCollectionLoaded: selectIsCollectionLoaded\n// })\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchingCollectionStart: () => dispatch(fetchingCollectionStart()) // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/pages/shop/shop-page.component.jsx"],"names":["React","useEffect","connect","Route","fetchingCollectionStart","CollectionPageContainer","CollectionsOverviewContainer","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AAEA,SAASC,uBAAT,QAAwC,8BAAxC;AAEA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,4BAAP,MAAyC,2DAAzC,C,CAEA;AAEA;AAEA;AAEA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEH,EAAAA,uBAAF;AAA2BI,EAAAA;AAA3B,CAAD,KAAwC;AACrD;AACA;AACA;AACA;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,uBAAuB;AAC1B,GAFQ,EAEN,EAFM,CAAT,CANqD,CAUrD;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,EAAjC;AAAoC,IAAA,SAAS,EAAEH,4BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAOI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,gBAA3B;AAA4C,IAAA,SAAS,EAAEJ,uBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAeH,CAtDD,C,CAwDA;AACA;AACA;AACA;;;AAEA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACpCP,EAAAA,uBAAuB,EAAE,MAAMO,QAAQ,CAACP,uBAAuB,EAAxB,CADH,CAEpC;;AAFoC,CAAL,CAAnC;;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAOQ,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport './shop-page.style.scss'\n\nimport { connect } from 'react-redux'\n\nimport { Route } from 'react-router-dom'\n// import { fetchingCollectionSuccessAsync } from '../../redux/shop/shop.action'\n\nimport { fetchingCollectionStart } from '../../redux/shop/shop.action'\n\nimport CollectionPageContainer from '../collection/collection.container'\nimport CollectionsOverviewContainer from '../../collections-overview/collections-overview.container'\n\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n\n// import { updateCollections } from '../../redux/shop/shop.action'\n\n// // add spinner when loading the items on the page\n\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({ fetchingCollectionStart, match }) => {\n    // // we need isLoading true to render the spinner when items loading\n    // state = {\n    //     isLoading: true\n    // }\n\n    useEffect(() => {\n        fetchingCollectionStart()\n    }, [])\n\n    // unsubscribeFromSnapshot = null;\n\n    // componentDidMount() {\n\n    //     const { fetchingCollectionStart } = this.props;\n\n    //     fetchingCollectionStart()\n\n    //     // we used it before thunk and async\n\n    //     // // to get collections items from firebase databse when page starts\n    //     // const collectionRef = firestore.collection('collections');\n\n    //     // const { updateCollections } = this.props;\n\n    //     // collectionRef.onSnapshot(async snapShot => {\n    //     //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n    //     //     updateCollections(collectionsMap);\n    //     //     this.setState({ isLoading: false })\n\n    //     //     // // if we like to use get and promises\n\n    //     //     // collectionRef.get().then(snapShot => {\n    //     //     //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n    //     //     //     updateCollections(collectionsMap);\n    //     //     //     this.setState({ isLoading: false }) );\n    //     // })\n    // }\n\n    return (\n        <div className='shop-page'>\n            {/* match.path refers to the same page '/shop' because it the root page here */}\n\n            <Route exact path={`${match.path}`} component={CollectionsOverviewContainer} />\n\n            {/* :collectionId to make it reuseable if we have more catagories or product sections */}\n\n            <Route path={`${match.path}/:collectionId`} component={CollectionPageContainer} />\n            {/* isCollectionLoaded initiate state is false if the collections = null or not loaded */}\n            {/* that means the data will be load , so we have to switch 'isLoading' to true till data loaded */}\n            {/* bcuz the spinner only renders the spinner if isLoading is true which means that if there is no collection */}\n        </div>\n    )\n\n}\n\n// const mapStateToProps = createStructuredSelector({\n//     isCollectionFetching: selectIsCollectionFetching,\n//     isCollectionLoaded: selectIsCollectionLoaded\n// })\n\nconst mapDispatchToProps = dispatch => ({\n    fetchingCollectionStart: () => dispatch(fetchingCollectionStart())\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage)"]},"metadata":{},"sourceType":"module"}