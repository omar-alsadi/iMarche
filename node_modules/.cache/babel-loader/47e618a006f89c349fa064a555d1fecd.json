{"ast":null,"code":"var _jsxFileName = \"/Users/Roxas/Documents/Websites/iMarche/src/component/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../../component/form-input/form-input.component';\nimport CustomButton from '../../component/custom-button/custom-button.component'; // import { auth } from '../firebase/firebase-utils'\n\nimport { googleSignInStart, emailSignInStart } from '../redux/user/user.action';\nimport './sign-in.style.scss';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const [userCredentials, setUserCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password); // try {\n    //     await auth.signInWithEmailAndPassword(email, password);\n    //     this.setState({ email: '', password: '' })\n    // } catch (err) {\n    //     alert(\"The user Email / Password wrong or not exist !\")\n    //     console.log(err)\n    // }\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"I have already an account\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Sign in with your Email and Password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    label: \"email\",\n    required: true,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    label: \"password\",\n    required: true,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(CustomButton, {\n    onClick: googleSignInStart,\n    isGoogleButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, \"Sign In with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/iMarche/src/component/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","userCredentials","setUserCredentials","email","password","handleSubmit","event","preventDefault","handleChange","name","value","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux'\n\nimport FormInput from '../../component/form-input/form-input.component'\nimport CustomButton from '../../component/custom-button/custom-button.component'\n// import { auth } from '../firebase/firebase-utils'\n\n\nimport { googleSignInStart, emailSignInStart } from '../redux/user/user.action'\n\n\nimport './sign-in.style.scss'\n\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\n\n\n    const [userCredentials, setUserCredentials] = useState({\n        email: '',\n        password: ''\n    })\n\n    const { email, password } = userCredentials;\n\n    const handleSubmit = async event => {\n        event.preventDefault();\n\n\n\n        emailSignInStart(email, password);\n\n        // try {\n        //     await auth.signInWithEmailAndPassword(email, password);\n        //     this.setState({ email: '', password: '' })\n        // } catch (err) {\n        //     alert(\"The user Email / Password wrong or not exist !\")\n        //     console.log(err)\n        // }\n    }\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setUserCredentials({\n            ...userCredentials,\n            [name]: value\n        })\n    }\n\n    return (\n        <div className=\"sign-in\">\n            <h1 className=\"title\">I have already an account</h1>\n            <p>Sign in with your Email and Password</p>\n\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                    name='email'\n                    type='email'\n                    value={email}\n                    label=\"email\"\n                    required\n                    handleChange={handleChange}\n                />\n                {/* <label>Email:</label> */}\n                <FormInput\n                    name='password'\n                    type='password'\n                    value={password}\n                    label=\"password\"\n                    required\n                    handleChange={handleChange}\n                />\n                {/* <label>Password:</label> */}\n                <div className=\"buttons\">\n                    <CustomButton type='submit'>Sign In</CustomButton>\n                    <CustomButton onClick={googleSignInStart} isGoogleButton>Sign In with Google</CustomButton>\n                </div>\n            </form>\n        </div>\n    )\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password }))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn)"]},"metadata":{},"sourceType":"module"}