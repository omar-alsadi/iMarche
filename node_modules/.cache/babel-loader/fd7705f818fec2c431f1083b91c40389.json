{"ast":null,"code":"import ShopActionType from './shop.type';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils';\nexport const fetchingCollectionsStart = () => ({\n  type: ShopActionType.FETCH_COLLECTIONS_START\n});\nexport const fetchingCollectionSuccess = collectionsMap => ({\n  type: ShopActionType.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchingCollectionFailure = errorMessage => ({\n  type: ShopActionType.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchingCollectionSuccessAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); // to change isFetching to true\n\n    dispatch(fetchingCollectionStart());\n    collectionRef.get().then(snapShot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n      dispatch(fetchingCollectionSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchingCollectionFailure(error.message)));\n  };\n};\n/* Add to know ! */\n// If redux-thunk middleware is enabled ,\n// any time we attempt to dispatch a function instead of an object ,\n// the middleware will call that function with dispatch method itself\n// as the first argument .\n// we used it before fetching and before using thunk\n// export const updateCollections = (collectionsMap) => ({\n//     type: ShopActionType.UPDATE_COLLECTION,\n//     payload: collectionsMap\n// })","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/redux/shop/shop.action.js"],"names":["ShopActionType","firestore","convertCollectionsSnapshotToMap","fetchingCollectionsStart","type","FETCH_COLLECTIONS_START","fetchingCollectionSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchingCollectionFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchingCollectionSuccessAsync","dispatch","collectionRef","collection","fetchingCollectionStart","get","then","snapShot","catch","error","message"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,aAA3B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,wBAAwB,GAAG,OAAO;AAC3CC,EAAAA,IAAI,EAAEJ,cAAc,CAACK;AADsB,CAAP,CAAjC;AAIP,OAAO,MAAMC,yBAAyB,GAAIC,cAAD,KAAqB;AAC1DH,EAAAA,IAAI,EAAEJ,cAAc,CAACQ,yBADqC;AAE1DC,EAAAA,OAAO,EAAEF;AAFiD,CAArB,CAAlC;AAKP,OAAO,MAAMG,yBAAyB,GAAGC,YAAY,KAAK;AACtDP,EAAAA,IAAI,EAAEJ,cAAc,CAACY,yBADiC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA9C;AAOP,OAAO,MAAME,8BAA8B,GAAG,MAAM;AAChD,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CADe,CAGf;;AACAF,IAAAA,QAAQ,CAACG,uBAAuB,EAAxB,CAAR;AAEAF,IAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMb,cAAc,GAAGL,+BAA+B,CAACkB,QAAD,CAAtD;AACAN,MAAAA,QAAQ,CAACR,yBAAyB,CAACC,cAAD,CAA1B,CAAR;AACH,KAHD,EAGGc,KAHH,CAGSC,KAAK,IAAIR,QAAQ,CAACJ,yBAAyB,CAACY,KAAK,CAACC,OAAP,CAA1B,CAH1B;AAIH,GAVD;AAWH,CAZM;AAeP;AAEA;AACA;AACA;AACA;AAGI;AACJ;AACA;AACA;AACA","sourcesContent":["import ShopActionType from './shop.type'\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n\nexport const fetchingCollectionsStart = () => ({\n    type: ShopActionType.FETCH_COLLECTIONS_START,\n})\n\nexport const fetchingCollectionSuccess = (collectionsMap) => ({\n    type: ShopActionType.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchingCollectionFailure = errorMessage => ({\n    type: ShopActionType.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\n\n\nexport const fetchingCollectionSuccessAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n\n        // to change isFetching to true\n        dispatch(fetchingCollectionStart())\n\n        collectionRef.get().then(snapShot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n            dispatch(fetchingCollectionSuccess(collectionsMap));\n        }).catch(error => dispatch(fetchingCollectionFailure(error.message)))\n    }\n}\n\n\n/* Add to know ! */\n\n// If redux-thunk middleware is enabled ,\n// any time we attempt to dispatch a function instead of an object ,\n// the middleware will call that function with dispatch method itself\n// as the first argument .\n\n\n    // we used it before fetching and before using thunk\n// export const updateCollections = (collectionsMap) => ({\n//     type: ShopActionType.UPDATE_COLLECTION,\n//     payload: collectionsMap\n// })\n\n\n\n"]},"metadata":{},"sourceType":"module"}