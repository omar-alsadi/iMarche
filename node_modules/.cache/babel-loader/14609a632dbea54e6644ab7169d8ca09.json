{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nconst middlewares = [thunk]; // this will show our app log in console if the app in the development mode\n// that means if we deploy or open the app in the live server like heroku ('production mode') ,\n// it won't be show\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); // persist used to save items and data after refreshing the page or refreshing the session\n\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","thunk","logger","rootReducer","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,WAAW,GAAG,CAACH,KAAD,CAApB,C,CAEA;AACA;AACA;;AACA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBN,MAAjB;AACH;;AAED,OAAO,MAAMO,KAAK,GAAGX,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGK,WAAJ,CAA7B,CAAzB,C,CAEP;;AACA,OAAO,MAAMM,SAAS,GAAGV,YAAY,CAACS,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\n\nimport { persistStore } from 'redux-persist'\n\nimport thunk from 'redux-thunk'\n\nimport logger from 'redux-logger'\n\nimport rootReducer from './root-reducer'\n\nconst middlewares = [thunk];\n\n// this will show our app log in console if the app in the development mode\n// that means if we deploy or open the app in the live server like heroku ('production mode') ,\n// it won't be show\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\n\n// persist used to save items and data after refreshing the page or refreshing the session\nexport const persistor = persistStore(store);\n\nexport default { store, persistor }"]},"metadata":{},"sourceType":"module"}