{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, createUserProfileDocument, googleProvider, getCurrentUser } from '../../firebase/firebase-utils';\nimport { signInSuccess, signInFailure } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const snapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: snapShot.id,\n      ...snapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  yield getCurrentUser();\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","createUserProfileDocument","googleProvider","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","snapShot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_START","onEmailSignInStart","EMAIL_SIGN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,yBAAf,EAA0CC,cAA1C,EAA0DC,cAA1D,QAAgF,+BAAhF;AAEA,SACIC,aADJ,EAEIC,aAFJ,QAGO,eAHP;AAMA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC/C,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACG,yBAAD,EAA4BM,QAA5B,CAA1B;AACA,UAAME,QAAQ,GAAG,MAAMD,OAAO,CAACE,GAAR,EAAvB;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,QAAQ,CAACE,EAAf;AAAmB,SAAGF,QAAQ,CAACG,IAAT;AAAtB,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACgB,eAAL,CAAqBd,cAArB,CAAvB;AACAI,IAAAA,uBAAuB,CAACS,IAAD,CAAvB;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAID,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC/D,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACAd,IAAAA,uBAAuB,CAACS,IAAD,CAAvB;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACnC,QAAMnB,cAAc,EAApB;AACH;AAED,OAAO,UAAUoB,kBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,kBAAjB,EACZF,mBADY,CAAhB;AAGH;AAED,OAAO,UAAUG,mBAAV,GAAgC;AACnC,QAAM9B,UAAU,CACZI,eAAe,CAAC2B,iBADJ,EAEZZ,gBAFY,CAAhB;AAIH;AAID,OAAO,UAAUa,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CACZI,eAAe,CAAC6B,gBADJ,EAEZX,eAFY,CAAhB;AAIH;AAED,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CAACC,IAAI,CAAC2B,mBAAD,CAAL,EAA4B3B,IAAI,CAAC6B,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types'\n\nimport { auth, createUserProfileDocument, googleProvider, getCurrentUser } from '../../firebase/firebase-utils'\n\nimport {\n    signInSuccess,\n    signInFailure,\n} from './user.action'\n\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const snapShot = yield userRef.get();\n        yield put(signInSuccess({ id: snapShot.id, ...snapShot.data() }))\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        getSnapshotFromUserAuth(user)\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\n\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        getSnapshotFromUserAuth(user)\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* isUserAuthenticated() {\n    yield getCurrentUser();\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,\n        isUserAuthenticated\n    )\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_START,\n        signInWithGoogle\n    )\n}\n\n\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_START,\n        signInWithEmail\n    )\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart)])\n}"]},"metadata":{},"sourceType":"module"}