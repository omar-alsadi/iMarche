{"ast":null,"code":"var _jsxFileName = \"/Users/Roxas/Documents/Websites/clothy/src/component/pages/shop/shop-page.component.jsx\";\nimport React from 'react';\nimport './shop-page.style.scss';\nimport CollectionsOverview from '../../collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../spinner/with-spinner.component';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom'; // import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n// import { updateCollections } from '../../redux/shop/shop.action'\n// add spinner when loading the items on the page\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // // we need isLoading true to render the spinner when items loading\n  // state = {\n  //     isLoading: true\n  // }\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {// we used it before thunk and async\n    // // to get collections items from firebase databse when page starts\n    // const collectionRef = firestore.collection('collections');\n    // const { updateCollections } = this.props;\n    // collectionRef.onSnapshot(async snapShot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n    //     updateCollections(collectionsMap);\n    //     this.setState({ isLoading: false })\n    //     // // if we like to use get and promises\n    //     // collectionRef.get().then(snapShot => {\n    //     //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n    //     //     updateCollections(collectionsMap);\n    //     //     this.setState({ isLoading: false }) );\n    // })\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 72\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 80\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/pages/shop/shop-page.component.jsx"],"names":["React","CollectionsOverview","CollectionPage","WithSpinner","connect","Route","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","render","match","props","isLoading","state","path","mapDispatchToProps","dispatch","updateCollections","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AAEA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;AAEA;AAEA;;AACA,MAAMC,8BAA8B,GAAGH,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMM,yBAAyB,GAAGJ,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMM,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AACnC;AACA;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAG,CAIhB;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKC,KAA3B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEH,KAAK,CAACI,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGH,KAAD,iBAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEC;AAA3C,SAA0DD,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAII,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAED,KAAK,CAACI,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGH,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEC;AAAtC,SAAqDD,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH;;AA5CkC;;AA+CvC,MAAMI,kBAAkB,GAAGC,QAAQ,KAAK;AACpCC,EAAAA,iBAAiB,EAAEC,cAAc,IAAIF,QAAQ,CAACC,iBAAiB,CAACC,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIA,eAAehB,OAAO,CAAC,IAAD,EAAOa,kBAAP,CAAP,CAAkCT,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport './shop-page.style.scss'\n\nimport CollectionsOverview from '../../collections-overview/collections-overview.component'\nimport CollectionPage from '../collection/collection.component'\nimport WithSpinner from '../../spinner/with-spinner.component'\n\nimport { connect } from 'react-redux'\nimport { Route } from 'react-router-dom'\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n\n// import { updateCollections } from '../../redux/shop/shop.action'\n\n// add spinner when loading the items on the page\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n    // // we need isLoading true to render the spinner when items loading\n    // state = {\n    //     isLoading: true\n    // }\n\n    // unsubscribeFromSnapshot = null;\n\n    componentDidMount() {\n\n\n\n        // we used it before thunk and async\n\n        // // to get collections items from firebase databse when page starts\n        // const collectionRef = firestore.collection('collections');\n\n        // const { updateCollections } = this.props;\n\n        // collectionRef.onSnapshot(async snapShot => {\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n        //     updateCollections(collectionsMap);\n        //     this.setState({ isLoading: false })\n\n        //     // // if we like to use get and promises\n\n        //     // collectionRef.get().then(snapShot => {\n        //     //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n        //     //     updateCollections(collectionsMap);\n        //     //     this.setState({ isLoading: false }) );\n        // })\n    }\n\n    render() {\n        const { match } = this.props;\n        const { isLoading } = this.state;\n        return (\n            <div className='shop-page'>\n                {/* match.path refers to the same page '/shop' because it the root page here */}\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isLoading} {...props} />} />\n                {/* :collectionId to make it reuseable if we have more catagories or product sections */}\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={isLoading} {...props} />} />\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage)"]},"metadata":{},"sourceType":"module"}