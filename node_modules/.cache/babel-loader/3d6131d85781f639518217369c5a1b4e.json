{"ast":null,"code":"var _jsxFileName = \"/Users/Roxas/Documents/Websites/clothy/src/component/pages/shop/shop-page.component.jsx\";\nimport React from 'react';\nimport './shop-page.style.scss';\nimport CollectionsOverview from '../../collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../spinner/with-spinner.component';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils';\nimport { updateCollections } from '../../redux/shop/shop.action'; // add spinner when loading the items on the page\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    // to get collections items from firebase databse when page starts\n    const collectionRef = firestore.collection('collections');\n    const {\n      updateCollections\n    } = this.props;\n    collectionRef.onSnapshot(async snapShot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n      updateCollections(collectionsMap);\n      this.setState({\n        isLoading: false\n      }); // // if we like to use get and promises\n      // collectionRef.get().then(snapShot => {\n      //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n      //     updateCollections(collectionsMap);\n      //     this.setState({ isLoading: false }) );\n    });\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 72\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 80\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/Roxas/Documents/Websites/clothy/src/component/pages/shop/shop-page.component.jsx"],"names":["React","CollectionsOverview","CollectionPage","WithSpinner","connect","Route","firestore","convertCollectionsSnapshotToMap","updateCollections","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","isLoading","unsubscribeFromSnapshot","componentDidMount","collectionRef","collection","props","onSnapshot","snapShot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AAEA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,iBAAT,QAAkC,8BAAlC,C,CAEA;;AACA,MAAMC,8BAA8B,GAAGN,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMS,yBAAyB,GAAGP,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMS,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAEnCC,KAFmC,GAE3B;AACJC,MAAAA,SAAS,EAAE;AADP,KAF2B;AAAA,SAMnCC,uBANmC,GAMT,IANS;AAAA;;AAQnCC,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAMC,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,aAArB,CAAtB;AAEA,UAAM;AAAEV,MAAAA;AAAF,QAAwB,KAAKW,KAAnC;AAEAF,IAAAA,aAAa,CAACG,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AACvC,YAAMC,cAAc,GAAGf,+BAA+B,CAACc,QAAD,CAAtD;AACAb,MAAAA,iBAAiB,CAACc,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,SAAS,EAAE;AAAb,OAAd,EAHuC,CAKvC;AAEA;AACA;AACA;AACA;AACH,KAXD;AAYH;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKN,KAAvB;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAgB,KAAKD,KAA3B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGP,KAAD,iBAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEL;AAA3C,SAA0DK,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAII,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEM,KAAK,CAACC,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGP,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEL;AAAtC,SAAqDK,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH;;AAvCkC;;AA0CvC,MAAMQ,kBAAkB,GAAGC,QAAQ,KAAK;AACpCpB,EAAAA,iBAAiB,EAAEc,cAAc,IAAIM,QAAQ,CAACpB,iBAAiB,CAACc,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIA,eAAelB,OAAO,CAAC,IAAD,EAAOuB,kBAAP,CAAP,CAAkChB,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport './shop-page.style.scss'\n\nimport CollectionsOverview from '../../collections-overview/collections-overview.component'\nimport CollectionPage from '../collection/collection.component'\nimport WithSpinner from '../../spinner/with-spinner.component'\n\nimport { connect } from 'react-redux'\nimport { Route } from 'react-router-dom'\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase-utils'\n\nimport { updateCollections } from '../../redux/shop/shop.action'\n\n// add spinner when loading the items on the page\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n    // we need isLoading true to render the spinner when items loading\n    state = {\n        isLoading: true\n    }\n\n    unsubscribeFromSnapshot = null;\n\n    componentDidMount() {\n        // to get collections items from firebase databse when page starts\n        const collectionRef = firestore.collection('collections');\n\n        const { updateCollections } = this.props;\n\n        collectionRef.onSnapshot(async snapShot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n            updateCollections(collectionsMap);\n            this.setState({ isLoading: false })\n\n            // // if we like to use get and promises\n\n            // collectionRef.get().then(snapShot => {\n            //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n            //     updateCollections(collectionsMap);\n            //     this.setState({ isLoading: false }) );\n        })\n    }\n\n    render() {\n        const { match } = this.props;\n        const { isLoading } = this.state;\n        return (\n            <div className='shop-page'>\n                {/* match.path refers to the same page '/shop' because it the root page here */}\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isLoading} {...props} />} />\n                {/* :collectionId to make it reuseable if we have more catagories or product sections */}\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={isLoading} {...props} />} />\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage)"]},"metadata":{},"sourceType":"module"}